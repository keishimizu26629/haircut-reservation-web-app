rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth != null &&
             request.auth.token.admin == true;
    }

    function isStaff() {
      return request.auth != null &&
             (request.auth.token.admin == true ||
              request.auth.token.staff == true);
    }

    // Validate required fields for different document types
    function hasRequiredUserFields() {
      return request.resource.data.keys().hasAll(['email', 'displayName', 'createdAt']);
    }

    function hasRequiredReservationFields() {
      return request.resource.data.keys().hasAll([
        'customerId', 'staffId', 'serviceId', 'appointmentTime',
        'status', 'createdAt'
      ]);
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isStaff());
      allow create: if isAuthenticated() && isOwner(userId) && hasRequiredUserFields();
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin()) && hasRequiredUserFields();
      allow delete: if isAdmin();
    }

    // Customer profiles (extended user data)
    match /customers/{customerId} {
      allow read: if isAuthenticated() && (isOwner(customerId) || isStaff());
      allow create: if isAuthenticated() && isOwner(customerId);
      allow update: if isAuthenticated() && (isOwner(customerId) || isStaff());
      allow delete: if isAdmin();
    }

    // Staff profiles
    match /staff/{staffId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Services/Menu items
    match /services/{serviceId} {
      allow read: if true; // Public read access for service listings
      allow write: if isStaff();
    }

    // Reservations
    match /reservations/{reservationId} {
      allow read: if isAuthenticated() &&
                     (isOwner(resource.data.customerId) || isStaff());
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.customerId) &&
                       hasRequiredReservationFields();
      allow update: if isAuthenticated() &&
                       (isOwner(resource.data.customerId) || isStaff()) &&
                       hasRequiredReservationFields();
      allow delete: if isStaff();
    }

    // User Tags - ユーザー個別のタグ管理
    match /userTags/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Business hours and availability
    match /availability/{availabilityId} {
      allow read: if true; // Public read access
      allow write: if isStaff();
    }

    // Business settings and configuration
    match /settings/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Tenant/multi-location support
    match /tenants/{tenantId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();

      // Nested tenant-specific data
      match /{document=**} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
      }
    }

    // Analytics and reporting data
    match /analytics/{document=**} {
      allow read: if isStaff();
      allow write: if isStaff();
    }

    // Audit logs
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated(); // System can create logs
      allow update, delete: if false; // Logs are immutable
    }

    // Notification settings
    match /notifications/{userId} {
      allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    // Reviews and ratings
    match /reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && isOwner(request.resource.data.customerId);
      allow update: if isAuthenticated() && isOwner(resource.data.customerId);
      allow delete: if isAdmin() || isOwner(resource.data.customerId);
    }

    // Default deny rule for any unmatched paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
