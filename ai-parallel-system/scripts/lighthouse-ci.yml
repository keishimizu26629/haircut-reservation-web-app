# Lighthouse CI GitHub Actions Workflow
name: Lighthouse CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    
    services:
      firebase-emulator:
        image: node:18
        ports:
          - 9099:9099
          - 8080:8080
          - 9199:9199
          - 5001:5001
          - 4000:4000
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          
      - name: Start Firebase Emulator
        run: |
          npm install -g firebase-tools
          firebase emulators:start --only auth,firestore,storage,functions &
          sleep 30
          
      - name: Build and Start Application
        run: |
          cd frontend
          npm run build
          npm run preview &
          sleep 10
          
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --config=./lighthouse-config.js
          
      - name: Upload Lighthouse Results
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-results
          path: reports/lighthouse/
          
      - name: Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read lighthouse results and post summary
            const resultsPath = 'reports/lighthouse';
            if (fs.existsSync(resultsPath)) {
              const files = fs.readdirSync(resultsPath);
              const latestResult = files.sort().pop();
              
              if (latestResult) {
                const resultData = JSON.parse(fs.readFileSync(path.join(resultsPath, latestResult)));
                const comment = `
## 🚦 Lighthouse Performance Report

| Metric | Score | Status |
|--------|-------|--------|
| Performance | ${resultData.lhr.categories.performance.score * 100}% | ${resultData.lhr.categories.performance.score >= 0.8 ? '✅' : '❌'} |
| Accessibility | ${resultData.lhr.categories.accessibility.score * 100}% | ${resultData.lhr.categories.accessibility.score >= 0.9 ? '✅' : '❌'} |
| Best Practices | ${resultData.lhr.categories['best-practices'].score * 100}% | ${resultData.lhr.categories['best-practices'].score >= 0.8 ? '✅' : '❌'} |
| SEO | ${resultData.lhr.categories.seo.score * 100}% | ${resultData.lhr.categories.seo.score >= 0.8 ? '✅' : '❌'} |

### 📊 Core Web Vitals
- **FCP**: ${resultData.lhr.audits['first-contentful-paint'].displayValue}
- **LCP**: ${resultData.lhr.audits['largest-contentful-paint'].displayValue}
- **CLS**: ${resultData.lhr.audits['cumulative-layout-shift'].displayValue}
- **TBT**: ${resultData.lhr.audits['total-blocking-time'].displayValue}

[View Full Report](${resultData.lhr.lighthouseVersion})
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }