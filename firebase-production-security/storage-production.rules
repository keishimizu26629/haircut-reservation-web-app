rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // =====================================
    // セキュリティ機能関数（共通）
    // =====================================
    
    // ユーザー認証確認
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // ユーザーIDの一致確認
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // ファイル形式検証
    function isValidImageType() {
      return resource.contentType.matches('image/(jpeg|jpg|png|webp)');
    }
    
    function isValidDocumentType() {
      return resource.contentType.matches('application/(pdf|doc|docx)') ||
             resource.contentType.matches('image/(jpeg|jpg|png|webp)');
    }
    
    // ファイルサイズ制限
    function isValidImageSize() {
      return resource.size <= 5 * 1024 * 1024; // 5MB
    }
    
    function isValidDocumentSize() {
      return resource.size <= 50 * 1024 * 1024; // 50MB
    }
    
    // セキュアファイル名チェック
    function isSecureFileName(filename) {
      return filename.matches('[a-zA-Z0-9._-]+') && 
             !filename.matches('.*\\.\\..*') && 
             !filename.matches('.*[<>:\"/\\|?*].*');
    }
    
    // テナント権限確認（Firestoreから取得）
    function hasTenantAccess(tenantId) {
      return isAuthenticated() && 
             firestore.exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.tenantId == tenantId;
    }
    
    // 管理者権限確認
    function isAdmin(tenantId) {
      return isAuthenticated() && 
             firestore.exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.tenantId == tenantId &&
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // スタッフ権限確認
    function isStaff(tenantId) {
      return isAuthenticated() && 
             firestore.exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.tenantId == tenantId &&
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['admin', 'staff'];
    }
    
    // レート制限（アップロード頻度制限）
    function withinUploadRateLimit() {
      return request.time > resource.timeCreated + duration.value(5, 's');
    }
    
    // =====================================
    // プロフィール画像（ユーザー個人）
    // =====================================
    match /profiles/{tenantId}/users/{userId}/{fileName} {
      // 読み取り：同テナントのスタッフ以上または本人
      allow read: if hasTenantAccess(tenantId) && 
                     (isStaff(tenantId) || isOwner(userId)) &&
                     isSecureFileName(fileName);
      
      // アップロード：本人または管理者
      allow write: if (isOwner(userId) || isAdmin(tenantId)) &&
                      hasTenantAccess(tenantId) &&
                      isValidImageType() &&
                      isValidImageSize() &&
                      isSecureFileName(fileName) &&
                      withinUploadRateLimit();
      
      // 削除：本人または管理者
      allow delete: if (isOwner(userId) || isAdmin(tenantId)) &&
                       hasTenantAccess(tenantId);
    }
    
    // =====================================
    // スタッフ画像（営業用）
    // =====================================
    match /staff/{tenantId}/photos/{staffId}/{fileName} {
      // 読み取り：同テナントのスタッフ以上
      allow read: if isStaff(tenantId) && isSecureFileName(fileName);
      
      // アップロード：管理者のみ
      allow write: if isAdmin(tenantId) &&
                      isValidImageType() &&
                      isValidImageSize() &&
                      isSecureFileName(fileName) &&
                      withinUploadRateLimit() &&
                      // スタッフの存在確認
                      firestore.exists(/databases/(default)/documents/staff/$(staffId));
      
      // 削除：管理者のみ
      allow delete: if isAdmin(tenantId);
    }
    
    // =====================================
    // サービス画像（メニュー用）
    // =====================================
    match /services/{tenantId}/images/{serviceId}/{fileName} {
      // 読み取り：同テナントのスタッフ以上
      allow read: if isStaff(tenantId) && isSecureFileName(fileName);
      
      // アップロード：管理者のみ
      allow write: if isAdmin(tenantId) &&
                      isValidImageType() &&
                      isValidImageSize() &&
                      isSecureFileName(fileName) &&
                      withinUploadRateLimit() &&
                      // サービスの存在確認
                      firestore.exists(/databases/(default)/documents/services/$(serviceId));
      
      // 削除：管理者のみ
      allow delete: if isAdmin(tenantId);
    }
    
    // =====================================
    // 店舗画像（ギャラリー用）
    // =====================================
    match /gallery/{tenantId}/images/{imageId} {
      // 読み取り：同テナントのスタッフ以上
      allow read: if isStaff(tenantId) && isSecureFileName(imageId);
      
      // アップロード：管理者のみ
      allow write: if isAdmin(tenantId) &&
                      isValidImageType() &&
                      isValidImageSize() &&
                      isSecureFileName(imageId) &&
                      withinUploadRateLimit();
      
      // 削除：管理者のみ
      allow delete: if isAdmin(tenantId);
    }
    
    // =====================================
    // ドキュメント（契約書・同意書等）
    // =====================================
    match /documents/{tenantId}/legal/{documentId} {
      // 読み取り：管理者のみ
      allow read: if isAdmin(tenantId) && isSecureFileName(documentId);
      
      // アップロード：管理者のみ
      allow write: if isAdmin(tenantId) &&
                      isValidDocumentType() &&
                      isValidDocumentSize() &&
                      isSecureFileName(documentId) &&
                      withinUploadRateLimit();
      
      // 削除：管理者のみ（30日経過後）
      allow delete: if isAdmin(tenantId) &&
                       request.time > resource.timeCreated + duration.value(30, 'd');
    }
    
    // =====================================
    // 顧客関連ドキュメント
    // =====================================
    match /customers/{tenantId}/documents/{customerId}/{fileName} {
      // 読み取り：同テナントのスタッフ以上
      allow read: if isStaff(tenantId) && isSecureFileName(fileName);
      
      // アップロード：同テナントのスタッフ以上
      allow write: if isStaff(tenantId) &&
                      isValidDocumentType() &&
                      isValidDocumentSize() &&
                      isSecureFileName(fileName) &&
                      withinUploadRateLimit() &&
                      // 顧客の存在確認
                      firestore.exists(/databases/(default)/documents/customers/$(customerId));
      
      // 削除：管理者のみ
      allow delete: if isAdmin(tenantId);
    }
    
    // =====================================
    // バックアップファイル（システム用）
    // =====================================
    match /backups/{tenantId}/exports/{backupId} {
      // 読み取り：管理者のみ
      allow read: if isAdmin(tenantId) && isSecureFileName(backupId);
      
      // アップロード：システムのみ（Cloud Functionsから）
      allow write: if false; // Cloud Functionsでのみ作成
      
      // 削除：システム自動削除のみ
      allow delete: if false;
    }
    
    // =====================================
    // 一時ファイル（アップロード処理用）
    // =====================================
    match /temp/{tenantId}/uploads/{userId}/{fileName} {
      // 読み取り：本人のみ
      allow read: if isOwner(userId) && 
                     hasTenantAccess(tenantId) &&
                     isSecureFileName(fileName);
      
      // アップロード：本人のみ（24時間以内）
      allow write: if isOwner(userId) &&
                      hasTenantAccess(tenantId) &&
                      isValidImageType() &&
                      isValidImageSize() &&
                      isSecureFileName(fileName) &&
                      withinUploadRateLimit();
      
      // 削除：本人または24時間経過後自動削除
      allow delete: if isOwner(userId) && hasTenantAccess(tenantId);
    }
    
    // =====================================
    // システムファイル（設定・テンプレート）
    // =====================================
    match /system/{tenantId}/templates/{templateId} {
      // 読み取り：管理者のみ
      allow read: if isAdmin(tenantId) && isSecureFileName(templateId);
      
      // アップロード・削除：管理者のみ
      allow write, delete: if isAdmin(tenantId) &&
                              isValidDocumentType() &&
                              isValidDocumentSize() &&
                              isSecureFileName(templateId);
    }
    
    // =====================================
    // ログファイル（監査・アクセスログ）
    // =====================================
    match /logs/{tenantId}/access/{logDate}/{logFile} {
      // 読み取り：管理者のみ
      allow read: if isAdmin(tenantId) && 
                     isSecureFileName(logFile) &&
                     logDate.matches('[0-9]{4}-[0-9]{2}-[0-9]{2}');
      
      // 作成：システムのみ
      allow write: if false; // Cloud Functionsでのみ作成
      
      // 削除：システム自動削除のみ（3ヶ月経過後）
      allow delete: if false;
    }
    
    // =====================================
    // パブリックアセット（CSS・JS・画像）
    // =====================================
    match /public/{tenantId}/assets/{assetPath=**} {
      // 読み取り：認証不要（パブリックアクセス）
      allow read: if true;
      
      // アップロード：管理者のみ
      allow write: if isAdmin(tenantId) &&
                      (isValidImageType() || 
                       resource.contentType.matches('text/(css|javascript)') ||
                       resource.contentType.matches('application/javascript')) &&
                      resource.size <= 10 * 1024 * 1024 && // 10MB
                      isSecureFileName(assetPath);
      
      // 削除：管理者のみ
      allow delete: if isAdmin(tenantId);
    }
    
    // =====================================
    // セキュリティ制限
    // =====================================
    
    // 不正なパスパターンを明示的に拒否
    match /admin/{path=**} {
      allow read, write, delete: if false;
    }
    
    match /config/{path=**} {
      allow read, write, delete: if false;
    }
    
    match /private/{path=**} {
      allow read, write, delete: if false;
    }
    
    // 隠しファイル・システムファイルを拒否
    match /{path=**} {
      allow read, write, delete: if !path.matches('.*\\.env.*') &&
                                   !path.matches('.*\\.key.*') &&
                                   !path.matches('.*\\.secret.*') &&
                                   !path.matches('.*\\.config.*') &&
                                   !path.matches('\\..*');
    }
    
    // 上記ルール以外は全て拒否
    match /{allPaths=**} {
      allow read, write, delete: if false;
    }
  }
}