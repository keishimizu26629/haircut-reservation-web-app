rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =====================================
    // セキュリティ機能関数（共通）
    // =====================================
    
    // ユーザー認証確認
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // ユーザーIDの一致確認
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // テナント権限確認
    function hasTenantAccess(tenantId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.tenantId == tenantId;
    }
    
    // 管理者権限確認
    function isAdmin(tenantId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.tenantId == tenantId &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // スタッフ権限確認
    function isStaff(tenantId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.tenantId == tenantId &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'staff'];
    }
    
    // データ検証関数
    function isValidEmail(email) {
      return email.matches('.*@.*\\..*');
    }
    
    function isValidPhoneNumber(phone) {
      return phone.matches('[0-9-]{10,15}');
    }
    
    function isValidDate(dateStr) {
      return dateStr is string && dateStr.matches('[0-9]{4}-[0-9]{2}-[0-9]{2}');
    }
    
    function isValidTime(timeStr) {
      return timeStr is string && timeStr.matches('[0-9]{2}:[0-9]{2}');
    }
    
    // レート制限確認（簡易版）
    function withinRateLimit() {
      return request.time > resource.data.lastUpdate + duration.value(1, 's');
    }
    
    // =====================================
    // テナント管理（超高セキュリティ）
    // =====================================
    match /tenants/{tenantId} {
      // 読み取り：テナント管理者のみ
      allow read: if isAdmin(tenantId);
      
      // 作成：認証済みユーザーのみ（新規テナント登録）
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['name', 'businessType', 'contactEmail', 'createdAt', 'isActive']) &&
                       isValidEmail(request.resource.data.contactEmail) &&
                       request.resource.data.isActive == true &&
                       request.resource.data.createdAt == request.time;
      
      // 更新：テナント管理者のみ
      allow update: if isAdmin(tenantId) && 
                       withinRateLimit() &&
                       !('id' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('createdAt' in request.resource.data.diff(resource.data).affectedKeys());
      
      // 削除：禁止（データ保護）
      allow delete: if false;
    }
    
    // =====================================
    // ユーザー管理（RBAC実装）
    // =====================================
    match /users/{userId} {
      // 読み取り：本人または同テナントの管理者
      allow read: if isOwner(userId) || 
                     (isAuthenticated() && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.tenantId == resource.data.tenantId &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // 作成：認証済みユーザー（初回登録のみ）
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       request.resource.data.keys().hasAll(['email', 'tenantId', 'role', 'isActive', 'createdAt']) &&
                       isValidEmail(request.resource.data.email) &&
                       request.resource.data.role in ['admin', 'staff', 'customer'] &&
                       request.resource.data.isActive == true &&
                       request.resource.data.createdAt == request.time;
      
      // 更新：本人または管理者
      allow update: if (isOwner(userId) || isAdmin(resource.data.tenantId)) && 
                       withinRateLimit() &&
                       !('id' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('createdAt' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('tenantId' in request.resource.data.diff(resource.data).affectedKeys());
      
      // 削除：管理者のみ（論理削除推奨）
      allow delete: if isAdmin(resource.data.tenantId);
    }
    
    // =====================================
    // 顧客管理（テナント分離）
    // =====================================
    match /customers/{customerId} {
      // 読み取り：同テナントのスタッフ以上
      allow read: if isStaff(resource.data.tenantId);
      
      // 作成：同テナントのスタッフ以上
      allow create: if isAuthenticated() &&
                       hasTenantAccess(request.resource.data.tenantId) &&
                       isStaff(request.resource.data.tenantId) &&
                       request.resource.data.keys().hasAll(['name', 'email', 'phone', 'tenantId', 'createdAt']) &&
                       isValidEmail(request.resource.data.email) &&
                       isValidPhoneNumber(request.resource.data.phone) &&
                       request.resource.data.createdAt == request.time;
      
      // 更新：同テナントのスタッフ以上
      allow update: if isStaff(resource.data.tenantId) &&
                       withinRateLimit() &&
                       !('tenantId' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('createdAt' in request.resource.data.diff(resource.data).affectedKeys());
      
      // 削除：管理者のみ
      allow delete: if isAdmin(resource.data.tenantId);
    }
    
    // =====================================
    // スタッフ管理（高セキュリティ）
    // =====================================
    match /staff/{staffId} {
      // 読み取り：同テナントのスタッフ以上
      allow read: if isStaff(resource.data.tenantId);
      
      // 作成：管理者のみ
      allow create: if isAdmin(request.resource.data.tenantId) &&
                       request.resource.data.keys().hasAll(['name', 'email', 'phone', 'tenantId', 'specializations', 'isActive', 'createdAt']) &&
                       isValidEmail(request.resource.data.email) &&
                       isValidPhoneNumber(request.resource.data.phone) &&
                       request.resource.data.isActive == true &&
                       request.resource.data.createdAt == request.time;
      
      // 更新：管理者または本人（制限付き）
      allow update: if (isAdmin(resource.data.tenantId) || 
                       (isStaff(resource.data.tenantId) && isOwner(resource.data.userId))) &&
                       withinRateLimit() &&
                       !('tenantId' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('createdAt' in request.resource.data.diff(resource.data).affectedKeys());
      
      // 削除：管理者のみ
      allow delete: if isAdmin(resource.data.tenantId);
    }
    
    // =====================================
    // サービス管理（ビジネス機能）
    // =====================================
    match /services/{serviceId} {
      // 読み取り：同テナントのスタッフ以上
      allow read: if isStaff(resource.data.tenantId);
      
      // 作成：管理者のみ
      allow create: if isAdmin(request.resource.data.tenantId) &&
                       request.resource.data.keys().hasAll(['name', 'description', 'price', 'duration', 'tenantId', 'isActive', 'createdAt']) &&
                       request.resource.data.price is number &&
                       request.resource.data.price >= 0 &&
                       request.resource.data.duration is number &&
                       request.resource.data.duration > 0 &&
                       request.resource.data.isActive == true &&
                       request.resource.data.createdAt == request.time;
      
      // 更新：管理者のみ
      allow update: if isAdmin(resource.data.tenantId) &&
                       withinRateLimit() &&
                       !('tenantId' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('createdAt' in request.resource.data.diff(resource.data).affectedKeys());
      
      // 削除：管理者のみ
      allow delete: if isAdmin(resource.data.tenantId);
    }
    
    // =====================================
    // 予約管理（コアビジネス機能）
    // =====================================
    match /reservations/{reservationId} {
      // 読み取り：同テナントのスタッフ以上または顧客本人
      allow read: if isStaff(resource.data.tenantId) || 
                     (isAuthenticated() && resource.data.customerId == request.auth.uid);
      
      // 作成：同テナントのスタッフ以上
      allow create: if isStaff(request.resource.data.tenantId) &&
                       request.resource.data.keys().hasAll(['customerId', 'staffId', 'serviceId', 'tenantId', 'date', 'time', 'status', 'createdAt']) &&
                       isValidDate(request.resource.data.date) &&
                       isValidTime(request.resource.data.time) &&
                       request.resource.data.status in ['pending', 'confirmed', 'cancelled', 'completed'] &&
                       request.resource.data.createdAt == request.time &&
                       // 関連データの存在確認
                       exists(/databases/$(database)/documents/customers/$(request.resource.data.customerId)) &&
                       exists(/databases/$(database)/documents/staff/$(request.resource.data.staffId)) &&
                       exists(/databases/$(database)/documents/services/$(request.resource.data.serviceId));
      
      // 更新：同テナントのスタッフ以上
      allow update: if isStaff(resource.data.tenantId) &&
                       withinRateLimit() &&
                       !('tenantId' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('customerId' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('createdAt' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       // ステータス変更の妥当性確認
                       (resource.data.status != 'completed' || request.resource.data.status == 'completed');
      
      // 削除：管理者のみ（24時間経過後）
      allow delete: if isAdmin(resource.data.tenantId) &&
                       request.time > resource.data.createdAt + duration.value(24, 'h');
    }
    
    // =====================================
    // 設定管理（テナント固有設定）
    // =====================================
    match /settings/{tenantId} {
      // 読み取り：同テナントのスタッフ以上
      allow read: if isStaff(tenantId);
      
      // 作成・更新：管理者のみ
      allow create, update: if isAdmin(tenantId) && withinRateLimit();
      
      // 削除：禁止
      allow delete: if false;
    }
    
    // =====================================
    // 監査ログ（読み取り専用）
    // =====================================
    match /auditLogs/{logId} {
      // 読み取り：管理者のみ
      allow read: if isAuthenticated() && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // 作成：システムのみ（Cloud Functionsから）
      allow create: if false; // Cloud Functionsでのみ作成
      
      // 更新・削除：禁止
      allow update, delete: if false;
    }
    
    // =====================================
    // システム統計（読み取り専用）
    // =====================================
    match /systemStats/{statId} {
      // 読み取り：管理者のみ
      allow read: if isAuthenticated() && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // 作成・更新・削除：システムのみ
      allow create, update, delete: if false;
    }
    
    // =====================================
    // その他のセキュリティ設定
    // =====================================
    
    // 上記以外のパスは全て拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
}