name: Firebase Hosting Deploy

on:
  push:
    branches: [main, ci/production]
  pull_request:
    branches: [main, ci/production]

env:
  NODE_VERSION: '20'

jobs:
  # Development Environment Deploy (main branch)
  deploy-dev:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci --legacy-peer-deps

      - name: Build frontend for Dev
        working-directory: frontend
        env:
          # Firebase Dev configuration from GitHub Secrets
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_DEV_PROJECT_ID }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_DEV_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_DEV_AUTH_DOMAIN }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_DEV_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_DEV_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_DEV_APP_ID }}
          NODE_ENV: production
          FIREBASE_ENV: development
        run: npm run generate

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Copy build files to Firebase Dev directory
        run: |
          mkdir -p firebase-dev/public
          cp -r frontend/.output/public/* firebase-dev/public/

      - name: Deploy to Firebase Dev (Hosting, Firestore, Storage)
        working-directory: firebase-dev
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          echo "Deploying to Firebase Dev (Hosting, Rules, Indexes)..."
          firebase deploy --only hosting,firestore:rules,firestore:indexes,storage --token "$FIREBASE_TOKEN" --non-interactive --project haircut-reservation-dev

  # Production Environment Deploy (ci/production branch)
  deploy-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/ci/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci --legacy-peer-deps

      - name: Build frontend for Prod
        working-directory: frontend
        env:
          # Firebase Prod configuration from GitHub Secrets
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROD_PROJECT_ID }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_PROD_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_PROD_AUTH_DOMAIN }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_PROD_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_PROD_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_PROD_APP_ID }}
          NODE_ENV: production
          FIREBASE_ENV: production
        run: npm run generate

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Copy build files to Firebase Prod directory
        run: |
          mkdir -p firebase-prod/public
          cp -r frontend/.output/public/* firebase-prod/public/

      - name: Deploy to Firebase Prod (Hosting, Firestore, Storage)
        working-directory: firebase-prod
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          echo "Deploying to Firebase Prod (Hosting, Rules, Indexes)..."
          firebase deploy --only hosting,firestore:rules,firestore:indexes,storage --token "$FIREBASE_TOKEN" --non-interactive --project haircut-reservation-prod

  # Deploy summary
  deploy-summary:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    steps:
      - name: Deploy Summary
        run: |
          echo "## Firebase Hosting Deploy Results" >> $GITHUB_STEP_SUMMARY
          echo "- Dev Deploy: ${{ needs.deploy-dev.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Prod Deploy: ${{ needs.deploy-prod.result }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy-dev.result }}" == "success" ]; then
            echo "### ✅ Dev Deploy Status: Success" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Dev URL**: https://haircut-reservation-dev.web.app" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.deploy-prod.result }}" == "success" ]; then
            echo "### ✅ Prod Deploy Status: Success" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Prod URL**: https://haircut-reservation-prod.web.app" >> $GITHUB_STEP_SUMMARY
          fi
