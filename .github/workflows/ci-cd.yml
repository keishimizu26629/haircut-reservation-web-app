name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and Type Check
  lint-and-type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.workspace }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ matrix.workspace }}
        run: npm run lint

      - name: Run Type Check
        working-directory: ${{ matrix.workspace }}
        run: npm run type-check

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.workspace }}
        run: npm ci

      - name: Run npm audit
        working-directory: ${{ matrix.workspace }}
        run: npm audit --audit-level=moderate

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.workspace }}
        run: npm ci

      - name: Run unit tests with coverage
        working-directory: ${{ matrix.workspace }}
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.workspace }}/coverage/lcov.info
          flags: ${{ matrix.workspace }}
          name: ${{ matrix.workspace }}-coverage
          fail_ci_if_error: true

      - name: Check coverage threshold
        working-directory: ${{ matrix.workspace }}
        run: |
          COVERAGE=$(npm run test:coverage -- --reporter=text-summary | grep "Lines" | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage $COVERAGE% is below 80% threshold"
            exit 1
          fi
          echo "Coverage $COVERAGE% meets the 80% threshold"

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: haircut_reservation_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Java for Firebase Emulator
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Start Firebase Emulator
        working-directory: firebase
        run: firebase emulators:start --only auth,firestore,storage &
        env:
          FIREBASE_PROJECT: demo-project

      - name: Wait for Firebase Emulator
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:4000; do sleep 1; done'

      - name: Run backend integration tests
        working-directory: backend
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/haircut_reservation_test
          REDIS_URL: redis://localhost:6379
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          FIRESTORE_EMULATOR_HOST: localhost:8080

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start application with Docker Compose
        run: |
          docker compose -f docker-compose.yml -f docker-compose.test.yml up -d
          timeout 120 bash -c 'until curl -s http://localhost:3000; do sleep 2; done'

      - name: Install Playwright
        working-directory: tests
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:3001

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: tests/playwright-report/
          retention-days: 30

      - name: Stop Docker Compose
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.test.yml down

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # e.g., kubectl, docker compose, or cloud provider CLI

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # e.g., kubectl, docker compose, or cloud provider CLI

  # Security Scan for Docker Images
  security-scan-images:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [frontend, backend]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Quality Gate & Integration Tests
  quality-gate:
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan-images]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Quality Monitor
        run: |
          chmod +x scripts/quality-monitor.sh
          ./scripts/quality-monitor.sh

      - name: Run Security Validation
        run: |
          chmod +x scripts/security-validation-test.sh
          ./scripts/security-validation-test.sh

      - name: Upload Quality Reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: reports/
          retention-days: 30

      - name: Quality Gate Check
        run: |
          echo "Quality Gate: Checking minimum standards..."
          # This would check quality metrics and fail if below threshold
          echo "✅ Quality Gate: PASSED"

  # Automated Team Notifications
  team-notifications:
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Team Code Review
        run: |
          chmod +x scripts/team-code-review.sh
          ./scripts/team-code-review.sh

      - name: Notify Team of Results
        if: always()
        run: |
          echo "Pipeline Status: ${{ job.status }}"
          echo "Quality Status: ${{ needs.quality-gate.result }}"
          # This would send notifications to team communication channels