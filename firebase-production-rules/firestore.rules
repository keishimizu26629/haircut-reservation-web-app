rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // =====================================
    // 本番環境用 Firestore セキュリティルール
    // 厳格なセキュリティ設定
    // =====================================
    
    // ヘルパー関数群
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.admin == true;
    }
    
    function isStaff() {
      return request.auth != null && 
             (request.auth.token.admin == true || 
              request.auth.token.staff == true);
    }
    
    function isTenantOwner(tenantId) {
      return request.auth != null &&
             request.auth.token.tenantOwner == true &&
             request.auth.token.tenantId == tenantId;
    }
    
    function isTenantStaff(tenantId) {
      return request.auth != null &&
             (request.auth.token.staff == true ||
              request.auth.token.tenantOwner == true) &&
             request.auth.token.tenantId == tenantId;
    }
    
    // データ検証関数
    function hasRequiredUserFields() {
      return request.resource.data.keys().hasAll([
        'email', 'displayName', 'createdAt', 'updatedAt'
      ]) &&
      request.resource.data.email is string &&
      request.resource.data.displayName is string &&
      request.resource.data.createdAt is timestamp &&
      request.resource.data.updatedAt is timestamp;
    }
    
    function hasRequiredReservationFields() {
      return request.resource.data.keys().hasAll([
        'tenantId', 'customerId', 'staffId', 'serviceIds', 
        'appointmentDate', 'startTime', 'endTime', 'status', 
        'createdAt', 'updatedAt'
      ]) &&
      request.resource.data.tenantId is string &&
      request.resource.data.customerId is string &&
      request.resource.data.staffId is string &&
      request.resource.data.serviceIds is list &&
      request.resource.data.appointmentDate is string &&
      request.resource.data.startTime is string &&
      request.resource.data.endTime is string &&
      request.resource.data.status in ['pending', 'confirmed', 'cancelled', 'completed'] &&
      request.resource.data.createdAt is timestamp &&
      request.resource.data.updatedAt is timestamp;
    }
    
    function isValidTenantData() {
      return request.resource.data.keys().hasAll([
        'name', 'ownerId', 'settings', 'createdAt', 'updatedAt'
      ]) &&
      request.resource.data.name is string &&
      request.resource.data.ownerId is string &&
      request.resource.data.settings is map &&
      request.resource.data.createdAt is timestamp &&
      request.resource.data.updatedAt is timestamp;
    }
    
    // レート制限（本番環境用）
    function isWithinRateLimit() {
      // 簡易的なレート制限チェック
      return request.time > resource.data.lastModified + duration.value(1, 's');
    }
    
    // =====================================
    // ユーザー関連データ
    // =====================================
    
    // ユーザープロフィール
    match /users/{userId} {
      allow read: if isAuthenticated() && 
                     (isOwner(userId) || isStaff() || isAdmin());
      allow create: if isAuthenticated() && 
                       isOwner(userId) && 
                       hasRequiredUserFields() &&
                       request.resource.data.email == request.auth.token.email;
      allow update: if isAuthenticated() && 
                       (isOwner(userId) || isAdmin()) && 
                       hasRequiredUserFields() &&
                       // メール変更は管理者のみ
                       (resource.data.email == request.resource.data.email || isAdmin());
      allow delete: if isAdmin();
    }
    
    // 顧客プロフィール（拡張情報）
    match /customers/{customerId} {
      allow read: if isAuthenticated() && 
                     (isOwner(customerId) || isStaff());
      allow create: if isAuthenticated() && 
                       isOwner(customerId) &&
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (isOwner(customerId) || isStaff()) &&
                       // 顧客は自分の基本情報のみ変更可能
                       (isOwner(customerId) ? 
                        !('internalNotes' in request.resource.data.diff(resource.data).affectedKeys()) :
                        true);
      allow delete: if isAdmin();
    }
    
    // =====================================
    // テナント関連データ
    // =====================================
    
    // テナント（店舗）情報
    match /tenants/{tenantId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       isValidTenantData() &&
                       request.resource.data.ownerId == request.auth.uid;
      allow update: if isTenantOwner(tenantId) && 
                       isValidTenantData();
      allow delete: if isAdmin();
      
      // テナント固有のサブコレクション
      match /staff/{staffId} {
        allow read: if isAuthenticated();
        allow write: if isTenantOwner(tenantId) || isAdmin();
      }
      
      match /services/{serviceId} {
        allow read: if true; // 公開情報
        allow write: if isTenantStaff(tenantId);
      }
      
      match /availability/{availabilityId} {
        allow read: if true; // 公開情報
        allow write: if isTenantStaff(tenantId);
      }
    }
    
    // =====================================
    // 予約関連データ
    // =====================================
    
    // 予約データ
    match /reservations/{reservationId} {
      allow read: if isAuthenticated() && 
                     (isOwner(resource.data.customerId) || 
                      isTenantStaff(resource.data.tenantId) ||
                      isAdmin());
      allow create: if isAuthenticated() && 
                       hasRequiredReservationFields() &&
                       request.resource.data.customerId == request.auth.uid &&
                       // 未来の日時のみ予約可能
                       request.resource.data.appointmentDate > request.time.toMillis();
      allow update: if isAuthenticated() && 
                       hasRequiredReservationFields() &&
                       (isOwner(resource.data.customerId) || 
                        isTenantStaff(resource.data.tenantId)) &&
                       // 顧客は限定的な更新のみ可能
                       (isOwner(resource.data.customerId) ? 
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                          'customerNotes', 'updatedAt'
                        ]) : true);
      allow delete: if isTenantStaff(resource.data.tenantId) || isAdmin();
    }
    
    // =====================================
    // システム関連データ
    // =====================================
    
    // システム設定
    match /settings/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // 分析データ
    match /analytics/{document=**} {
      allow read: if isStaff();
      allow write: if isStaff();
    }
    
    // 監査ログ（本番環境では厳格に管理）
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated(); // システムが自動作成
      allow update, delete: if false; // ログは不変
    }
    
    // 通知設定
    match /notifications/{userId} {
      allow read, write: if isAuthenticated() && 
                            (isOwner(userId) || isAdmin());
    }
    
    // レビュー・評価
    match /reviews/{reviewId} {
      allow read: if true; // 公開情報
      allow create: if isAuthenticated() && 
                       request.resource.data.customerId == request.auth.uid &&
                       // レビューの必須フィールドチェック
                       request.resource.data.keys().hasAll([
                         'tenantId', 'customerId', 'rating', 'comment', 'createdAt'
                       ]) &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5;
      allow update: if isAuthenticated() && 
                       isOwner(resource.data.customerId) &&
                       // 作成から24時間以内のみ編集可能
                       request.time < resource.data.createdAt + duration.value(1, 'd');
      allow delete: if isAdmin() || 
                       (isAuthenticated() && isOwner(resource.data.customerId));
    }
    
    // =====================================
    // セキュリティ強化設定
    // =====================================
    
    // 機密データへのアクセス制限
    match /sensitive/{document=**} {
      allow read, write: if false; // 完全にアクセス禁止
    }
    
    // テスト用データ（本番では無効）
    match /test_data/{document=**} {
      allow read, write: if false; // 本番環境ではテストデータ無効
    }
    
    // デフォルト拒否ルール
    match /{document=**} {
      allow read, write: if false;
    }
  }
}